<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppIsLoaded" xml:space="preserve">
    <value>Application is loaded</value>
    <comment>Message appears in log when app is loaded</comment>
  </data>
  <data name="caseSensetiveSetsWithCmplxRulesAreDone" xml:space="preserve">
    <value>Tasks with case sensetive sets with complex rules are done</value>
    <comment>case sensetive sets with "includes"</comment>
  </data>
  <data name="caseSensetiveTasksWithCmplxRulesAreDone" xml:space="preserve">
    <value>Tasks with case sensetive tasks with compelx rules are done</value>
    <comment>caseSensetive rules with "includes"</comment>
  </data>
  <data name="complexRulesAreDone" xml:space="preserve">
    <value>Tasks with complex rules are done</value>
    <comment>case insensetive rules with "includes"</comment>
  </data>
  <data name="complexSetsAreDone" xml:space="preserve">
    <value>Tasks with complex sets are done</value>
    <comment>case insensetive sets with "includes"</comment>
  </data>
  <data name="dbCreationError" xml:space="preserve">
    <value>Error occured while creating database</value>
  </data>
  <data name="dbDeleteError" xml:space="preserve">
    <value>Error occured while deleting database. The database was not created correctly and cannot be deleted. If the problem persists, remove the database manually by following the path: {0}</value>
  </data>
  <data name="dbError" xml:space="preserve">
    <value>Error occured while retreiving info from database</value>
  </data>
  <data name="dbInteractionError" xml:space="preserve">
    <value>Error occured while interacting with the database</value>
  </data>
  <data name="dbRollbackError" xml:space="preserve">
    <value>Error occured while rolling back the database</value>
  </data>
  <data name="extIsInvalid" xml:space="preserve">
    <value>Extension is invalid</value>
    <comment>Extension must not include anything than letters</comment>
  </data>
  <data name="fileAlreadyExist" xml:space="preserve">
    <value>File "{0}" already exist in {1}, skipping...</value>
  </data>
  <data name="noFilesForExt" xml:space="preserve">
    <value>There are no files for task "{0}", moving on to the next task</value>
  </data>
  <data name="noFilesForExtAndInclude" xml:space="preserve">
    <value>There are no files for the task "{0}" +" {1}", moving on to the next task</value>
  </data>
  <data name="notAllFilesWithExtWereMoved" xml:space="preserve">
    <value>Not all "{0}" files were copied successfully</value>
  </data>
  <data name="pathIsInvalid" xml:space="preserve">
    <value>Path is invalid</value>
    <comment>If GetFullPath returns error</comment>
  </data>
  <data name="relPathesAreForbidden" xml:space="preserve">
    <value>Relative pathes are forbidden</value>
    <comment>Rel pathes are forbidden</comment>
  </data>
  <data name="ReqFieldsAreEmpty" xml:space="preserve">
    <value>Required fields are empty</value>
    <comment>User didn't fill required fields</comment>
  </data>
  <data name="ruleCreatedSuccessfuly" xml:space="preserve">
    <value>Rule for {0} created successfuly</value>
    <comment>Rule is created successfuly</comment>
  </data>
  <data name="ruleForExtAlreadyExist" xml:space="preserve">
    <value>Rule for {0} already exists</value>
    <comment>Templated message shows if rule already exists</comment>
  </data>
  <data name="rulesAreDone" xml:space="preserve">
    <value>Tasks with rules are done</value>
  </data>
  <data name="ruleUpdatedSuccessfully" xml:space="preserve">
    <value>Rule for {0} updated successfully</value>
  </data>
  <data name="setAddedSuccessfully" xml:space="preserve">
    <value>Set added successfully</value>
  </data>
  <data name="setsAreDone" xml:space="preserve">
    <value>Tasks with sets are done</value>
  </data>
  <data name="start" xml:space="preserve">
    <value>Start</value>
    <comment>Worker class. Prints when work started</comment>
  </data>
  <data name="taskCompleted" xml:space="preserve">
    <value>Задача для "{0}" завершилась успешно. Перемещенно файлов: {1}</value>
  </data>
  <data name="taskCompletedWithIncludes" xml:space="preserve">
    <value>Task for"0" + "1" done successfully. Files copied: {2}</value>
    <comment>task for single rule done</comment>
  </data>
  <data name="tasksAreDoneForElapsedTime" xml:space="preserve">
    <value>All tasks done in {0} milliseconds</value>
  </data>
  <data name="unauthorizedAccessExceptionMessage" xml:space="preserve">
    <value>{0}. To copy file in {1} run app as administrator</value>
  </data>
</root>