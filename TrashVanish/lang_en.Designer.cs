//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrashVanish {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class lang_en {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal lang_en() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("TrashVanish.lang_en", typeof(lang_en).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application is loaded.
        /// </summary>
        internal static string AppIsLoaded {
            get {
                return ResourceManager.GetString("AppIsLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tasks with case sensetive sets with complex rules are done.
        /// </summary>
        internal static string caseSensetiveSetsWithCmplxRulesAreDone {
            get {
                return ResourceManager.GetString("caseSensetiveSetsWithCmplxRulesAreDone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tasks with case sensetive tasks with compelx rules are done.
        /// </summary>
        internal static string caseSensetiveTasksWithCmplxRulesAreDone {
            get {
                return ResourceManager.GetString("caseSensetiveTasksWithCmplxRulesAreDone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tasks with complex rules are done.
        /// </summary>
        internal static string complexRulesAreDone {
            get {
                return ResourceManager.GetString("complexRulesAreDone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tasks with complex sets are done.
        /// </summary>
        internal static string complexSetsAreDone {
            get {
                return ResourceManager.GetString("complexSetsAreDone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error occured while creating database.
        /// </summary>
        internal static string dbCreationError {
            get {
                return ResourceManager.GetString("dbCreationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error occured while deleting database. The database was not created correctly and cannot be deleted. If the problem persists, remove the database manually by following the path: {0}.
        /// </summary>
        internal static string dbDeleteError {
            get {
                return ResourceManager.GetString("dbDeleteError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error occured while retreiving info from database.
        /// </summary>
        internal static string dbError {
            get {
                return ResourceManager.GetString("dbError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error occured while interacting with the database.
        /// </summary>
        internal static string dbInteractionError {
            get {
                return ResourceManager.GetString("dbInteractionError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error occured while rolling back the database.
        /// </summary>
        internal static string dbRollbackError {
            get {
                return ResourceManager.GetString("dbRollbackError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension is invalid.
        /// </summary>
        internal static string extIsInvalid {
            get {
                return ResourceManager.GetString("extIsInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File &quot;{0}&quot; already exist in {1}, skipping....
        /// </summary>
        internal static string fileAlreadyExist {
            get {
                return ResourceManager.GetString("fileAlreadyExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are no files for task &quot;{0}&quot;, moving on to the next task.
        /// </summary>
        internal static string noFilesForExt {
            get {
                return ResourceManager.GetString("noFilesForExt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are no files for the task &quot;{0}&quot; +&quot; {1}&quot;, moving on to the next task.
        /// </summary>
        internal static string noFilesForExtAndInclude {
            get {
                return ResourceManager.GetString("noFilesForExtAndInclude", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not all &quot;{0}&quot; files were copied successfully.
        /// </summary>
        internal static string notAllFilesWithExtWereMoved {
            get {
                return ResourceManager.GetString("notAllFilesWithExtWereMoved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path is invalid.
        /// </summary>
        internal static string pathIsInvalid {
            get {
                return ResourceManager.GetString("pathIsInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Relative pathes are forbidden.
        /// </summary>
        internal static string relPathesAreForbidden {
            get {
                return ResourceManager.GetString("relPathesAreForbidden", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required fields are empty.
        /// </summary>
        internal static string ReqFieldsAreEmpty {
            get {
                return ResourceManager.GetString("ReqFieldsAreEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rule for {0} created successfuly.
        /// </summary>
        internal static string ruleCreatedSuccessfuly {
            get {
                return ResourceManager.GetString("ruleCreatedSuccessfuly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rule for {0} already exists.
        /// </summary>
        internal static string ruleForExtAlreadyExist {
            get {
                return ResourceManager.GetString("ruleForExtAlreadyExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tasks with rules are done.
        /// </summary>
        internal static string rulesAreDone {
            get {
                return ResourceManager.GetString("rulesAreDone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rule for {0} updated successfully.
        /// </summary>
        internal static string ruleUpdatedSuccessfully {
            get {
                return ResourceManager.GetString("ruleUpdatedSuccessfully", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set added successfully.
        /// </summary>
        internal static string setAddedSuccessfully {
            get {
                return ResourceManager.GetString("setAddedSuccessfully", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tasks with sets are done.
        /// </summary>
        internal static string setsAreDone {
            get {
                return ResourceManager.GetString("setsAreDone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start.
        /// </summary>
        internal static string start {
            get {
                return ResourceManager.GetString("start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Задача для &quot;{0}&quot; завершилась успешно. Перемещенно файлов: {1}.
        /// </summary>
        internal static string taskCompleted {
            get {
                return ResourceManager.GetString("taskCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Task for&quot;0&quot; + &quot;1&quot; done successfully. Files copied: {2}.
        /// </summary>
        internal static string taskCompletedWithIncludes {
            get {
                return ResourceManager.GetString("taskCompletedWithIncludes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All tasks done in {0} milliseconds.
        /// </summary>
        internal static string tasksAreDoneForElapsedTime {
            get {
                return ResourceManager.GetString("tasksAreDoneForElapsedTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}. To copy file in {1} run app as administrator.
        /// </summary>
        internal static string unauthorizedAccessExceptionMessage {
            get {
                return ResourceManager.GetString("unauthorizedAccessExceptionMessage", resourceCulture);
            }
        }
    }
}
